import type { Express, Response } from "express";
import { getSupabaseAdmin } from "../supabase-admin";
import { requireAuth, requireContentEditor, type AuthenticatedRequest } from "../auth";
import {
  validateBody,
  validateParams,
  idParamSchema
} from "../middleware/validation";
import { z } from "zod";

// Validation schemas for new structure
const createSectionSchema = z.object({
  title: z.string().min(1).max(255),
  content: z.string().optional().nullable(),
  section_type: z.enum(['general', 'trip_specific']),
  updated_by: z.string().optional().nullable()
});

const updateSectionSchema = createSectionSchema.partial();

const assignmentSchema = z.object({
  trip_id: z.number().positive(),
  section_id: z.number().positive(),
  order_index: z.number().positive()
});

const updateAssignmentSchema = z.object({
  order_index: z.number().positive()
});

// Legacy schema for backward compatibility
const createTripInfoSectionSchema = z.object({
  trip_id: z.number().positive(),
  title: z.string().min(1).max(255),
  content: z.string().optional().nullable(),
  order_index: z.number().positive().default(1),
  updated_by: z.string().optional().nullable()
});

export function registerTripInfoSectionRoutes(app: Express) {
  // ============ SECTION MANAGEMENT ENDPOINTS ============

  // Get all sections (library view) - with optional type filtering
  app.get("/api/trip-info-sections", async (req, res) => {
    try {
      const supabaseAdmin = getSupabaseAdmin();
      const { type } = req.query;

      let query = supabaseAdmin
        .from('trip_info_sections')
        .select('*')
        .order('title', { ascending: true });

      if (type && (type === 'general' || type === 'trip_specific')) {
        query = query.eq('section_type', type);
      }

      const { data: sections, error } = await query;

      if (error) {
        console.error('Error fetching trip info sections:', error);
        return res.status(500).json({ error: 'Failed to fetch trip info sections' });
      }

      res.json(sections || []);
    } catch (error: unknown) {
      console.error('Error fetching trip info sections:', error);
      return res.status(500).json({ error: 'Failed to fetch trip info sections' });
    }
  });

  // Get only general (reusable) sections
  app.get("/api/trip-info-sections/general", async (req, res) => {
    try {
      const supabaseAdmin = getSupabaseAdmin();
      const { data: sections, error } = await supabaseAdmin
        .from('trip_info_sections')
        .select('*')
        .eq('section_type', 'general')
        .order('title', { ascending: true });

      if (error) {
        console.error('Error fetching general sections:', error);
        return res.status(500).json({ error: 'Failed to fetch general sections' });
      }

      res.json(sections || []);
    } catch (error: unknown) {
      console.error('Error fetching general sections:', error);
      return res.status(500).json({ error: 'Failed to fetch general sections' });
    }
  });

  // Get sections for a specific trip (via assignments)
  app.get("/api/trip-info-sections/trip/:tripId", validateParams(z.object({ tripId: z.string().transform(Number) })), async (req, res) => {
    try {
      const supabaseAdmin = getSupabaseAdmin();
      const { data: sections, error } = await supabaseAdmin
        .from('trip_section_assignments')
        .select(`
          id,
          order_index,
          trip_info_sections (
            id,
            title,
            content,
            section_type,
            updated_by,
            updated_at
          )
        `)
        .eq('trip_id', req.params.tripId as unknown as number)
        .order('order_index', { ascending: true });

      if (error) {
        console.error('Error fetching trip sections:', error);
        return res.status(500).json({ error: 'Failed to fetch trip sections' });
      }

      // Transform data to include assignment info
      const transformedSections = (sections || []).map(assignment => ({
        ...assignment.trip_info_sections,
        assignment: {
          id: assignment.id,
          trip_id: req.params.tripId,
          order_index: assignment.order_index
        }
      }));

      res.json(transformedSections);
    } catch (error: unknown) {
      console.error('Error fetching trip sections:', error);
      return res.status(500).json({ error: 'Failed to fetch trip sections' });
    }
  });

  // Get section by ID
  app.get("/api/trip-info-sections/:id", validateParams(idParamSchema), async (req, res) => {
    try {
      const supabaseAdmin = getSupabaseAdmin();
      const { data: section, error } = await supabaseAdmin
        .from('trip_info_sections')
        .select('*')
        .eq('id', parseInt(req.params.id))
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          return res.status(404).json({ error: 'Trip info section not found' });
        }
        console.error('Error fetching trip info section:', error);
        return res.status(500).json({ error: 'Failed to fetch trip info section' });
      }

      res.json(section);
    } catch (error: unknown) {
      console.error('Error fetching trip info section:', error);
      return res.status(500).json({ error: 'Failed to fetch trip info section' });
    }
  });

  // Create new section
  app.post("/api/trip-info-sections", requireContentEditor, validateBody(createSectionSchema), async (req: AuthenticatedRequest, res) => {
    try {
      const supabaseAdmin = getSupabaseAdmin();
      const { data: section, error } = await supabaseAdmin
        .from('trip_info_sections')
        .insert({
          title: req.body.title,
          content: req.body.content,
          section_type: req.body.section_type,
          updated_by: req.body.updated_by,
          trip_id: null // New sections are not tied to specific trips
        })
        .select()
        .single();

      if (error) {
        console.error('Error creating trip info section:', error);
        return res.status(500).json({ error: 'Failed to create trip info section' });
      }

      return res.status(201).json(section);
    } catch (error: any) {
      console.error('Error creating trip info section:', error);
      return res.status(500).json({ error: 'Failed to create trip info section' });
    }
  });

  // Update section
  app.put("/api/trip-info-sections/:id", requireContentEditor, validateParams(idParamSchema), validateBody(updateSectionSchema), async (req: AuthenticatedRequest, res) => {
    try {
      const id = parseInt(req.params.id);
      const supabaseAdmin = getSupabaseAdmin();

      const updateData: any = { updated_at: new Date().toISOString() };
      if (req.body.title !== undefined) updateData.title = req.body.title;
      if (req.body.content !== undefined) updateData.content = req.body.content;
      if (req.body.section_type !== undefined) updateData.section_type = req.body.section_type;
      if (req.body.updated_by !== undefined) updateData.updated_by = req.body.updated_by;

      const { data: section, error } = await supabaseAdmin
        .from('trip_info_sections')
        .update(updateData)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          return res.status(404).json({ error: 'Trip info section not found' });
        }
        console.error('Error updating trip info section:', error);
        return res.status(500).json({ error: 'Failed to update trip info section' });
      }

      res.json(section);
    } catch (error: any) {
      console.error('Error updating trip info section:', error);
      return res.status(500).json({ error: 'Failed to update trip info section' });
    }
  });

  // Delete section
  app.delete("/api/trip-info-sections/:id", requireContentEditor, validateParams(idParamSchema), async (req: AuthenticatedRequest, res) => {
    try {
      const id = parseInt(req.params.id);
      const supabaseAdmin = getSupabaseAdmin();

      const { error } = await supabaseAdmin
        .from('trip_info_sections')
        .delete()
        .eq('id', id);

      if (error) {
        console.error('Error deleting trip info section:', error);
        return res.status(500).json({ error: 'Failed to delete trip info section' });
      }

      res.json({ message: 'Trip info section deleted successfully' });
    } catch (error: any) {
      console.error('Error deleting trip info section:', error);
      return res.status(500).json({ error: 'Failed to delete trip info section' });
    }
  });

  // ============ ASSIGNMENT MANAGEMENT ENDPOINTS ============

  // Assign section to trip
  app.post("/api/trip-section-assignments", requireContentEditor, validateBody(assignmentSchema), async (req: AuthenticatedRequest, res) => {
    try {
      const supabaseAdmin = getSupabaseAdmin();
      const { data: assignment, error } = await supabaseAdmin
        .from('trip_section_assignments')
        .insert({
          trip_id: req.body.trip_id,
          section_id: req.body.section_id,
          order_index: req.body.order_index
        })
        .select()
        .single();

      if (error) {
        if (error.code === '23505') { // Unique constraint violation
          return res.status(409).json({ error: 'Section already assigned to this trip' });
        }
        console.error('Error creating assignment:', error);
        return res.status(500).json({ error: 'Failed to assign section to trip' });
      }

      return res.status(201).json(assignment);
    } catch (error: any) {
      console.error('Error creating assignment:', error);
      return res.status(500).json({ error: 'Failed to assign section to trip' });
    }
  });

  // Update assignment order
  app.put("/api/trip-section-assignments/:id", requireContentEditor, validateParams(idParamSchema), validateBody(updateAssignmentSchema), async (req: AuthenticatedRequest, res) => {
    try {
      const id = parseInt(req.params.id);
      const supabaseAdmin = getSupabaseAdmin();

      const { data: assignment, error } = await supabaseAdmin
        .from('trip_section_assignments')
        .update({
          order_index: req.body.order_index,
          updated_at: new Date().toISOString()
        })
        .eq('id', id)
        .select()
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          return res.status(404).json({ error: 'Assignment not found' });
        }
        console.error('Error updating assignment:', error);
        return res.status(500).json({ error: 'Failed to update assignment' });
      }

      res.json(assignment);
    } catch (error: any) {
      console.error('Error updating assignment:', error);
      return res.status(500).json({ error: 'Failed to update assignment' });
    }
  });

  // Remove assignment (unassign section from trip)
  app.delete("/api/trip-section-assignments/:id", requireContentEditor, validateParams(idParamSchema), async (req: AuthenticatedRequest, res) => {
    try {
      const id = parseInt(req.params.id);
      const supabaseAdmin = getSupabaseAdmin();

      const { error } = await supabaseAdmin
        .from('trip_section_assignments')
        .delete()
        .eq('id', id);

      if (error) {
        console.error('Error deleting assignment:', error);
        return res.status(500).json({ error: 'Failed to unassign section' });
      }

      res.json({ message: 'Section unassigned successfully' });
    } catch (error: any) {
      console.error('Error deleting assignment:', error);
      return res.status(500).json({ error: 'Failed to unassign section' });
    }
  });

  // ============ LEGACY ENDPOINTS (for backward compatibility) ============

  // Legacy create endpoint - automatically creates assignment
  app.post("/api/trip-info-sections/legacy", requireContentEditor, validateBody(createTripInfoSectionSchema), async (req: AuthenticatedRequest, res) => {
    try {
      const supabaseAdmin = getSupabaseAdmin();

      // Create the section
      const { data: section, error: sectionError } = await supabaseAdmin
        .from('trip_info_sections')
        .insert({
          title: req.body.title,
          content: req.body.content,
          section_type: 'trip_specific',
          updated_by: req.body.updated_by,
          trip_id: req.body.trip_id // Keep for reference
        })
        .select()
        .single();

      if (sectionError) {
        console.error('Error creating trip info section:', sectionError);
        return res.status(500).json({ error: 'Failed to create trip info section' });
      }

      // Create the assignment
      const { data: assignment, error: assignmentError } = await supabaseAdmin
        .from('trip_section_assignments')
        .insert({
          trip_id: req.body.trip_id,
          section_id: section.id,
          order_index: req.body.order_index
        })
        .select()
        .single();

      if (assignmentError) {
        console.error('Error creating assignment:', assignmentError);
        return res.status(500).json({ error: 'Failed to create assignment' });
      }

      return res.status(201).json({ section, assignment });
    } catch (error: any) {
      console.error('Error creating trip info section with assignment:', error);
      return res.status(500).json({ error: 'Failed to create trip info section' });
    }
  });
}