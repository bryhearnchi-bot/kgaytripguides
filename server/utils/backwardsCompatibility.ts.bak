/**
 * Backwards compatibility helpers for error handling migration
 * Ensures existing clients continue to work with the new error system
 */

import type { Response } from 'express';
import { ApiError } from './ApiError';

/**
 * Send error response in the old format for backwards compatibility
 * Use this for gradual migration of route handlers
 */
export function sendLegacyError(res: Response, statusCode: number, message: string): void {
  res.status(statusCode).json({ error: message });
}

/**
 * Convert ApiError to legacy format
 */
export function apiErrorToLegacy(error: ApiError): { error: string; message?: string } {
  return {
    error: error.message,
    message: error.message
  };
}

/**
 * Wrapper for route handlers during migration
 * Automatically converts ApiError to legacy format
 */
export function legacyErrorWrapper(handler: Function) {
  return async (req: any, res: Response, next: Function) => {
    try {
      await handler(req, res, next);
    } catch (error: unknown) {
      if (error instanceof ApiError) {
        // Send in legacy format
        res.status(error.statusCode).json(apiErrorToLegacy(error));
      } else if (error instanceof Error) {
        // Generic error handling
        console.error('Unhandled error in legacy wrapper:', error);
        res.status(500).json({ error: 'Internal server error' });
      } else {
        next(error);
      }
    }
  };
}

/**
 * Check if client expects new error format
 * Based on API version or custom header
 */
export function expectsNewErrorFormat(req: any): boolean {
  // Check for API version header
  const apiVersion = req.headers['x-api-version'];
  if (apiVersion && apiVersion >= 'v2') {
    return true;
  }

  // Check for explicit format preference
  const errorFormat = req.headers['x-error-format'];
  if (errorFormat === 'structured') {
    return true;
  }

  // Default to legacy format for backwards compatibility
  return false;
}

/**
 * Send error in appropriate format based on client
 */
export function sendCompatibleError(
  req: any,
  res: Response,
  error: ApiError | Error
): void {
  if (res.headersSent) {
    console.error('Cannot send error - headers already sent');
    return;
  }

  if (error instanceof ApiError) {
    if (expectsNewErrorFormat(req)) {
      // New structured format
      res.status(error.statusCode).json(error.toJSON());
    } else {
      // Legacy format
      res.status(error.statusCode).json(apiErrorToLegacy(error));
    }
  } else {
    // Generic error
    const statusCode = (error as any).statusCode || 500;
    res.status(statusCode).json({
      error: error.message || 'An error occurred'
    });
  }
}